/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package de.buw.se;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.file.Files;

import javax.swing.JOptionPane;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

public class AppGUI extends Application {
	
	private FileChooser fileChooser;

    @Override
    public void start(Stage stage) {
    	
        // one text field to enter User Identity;
        TextField textField = new TextField();
        
        // one text field to enter user password;
        TextField textField1 = new TextField();
        
        // button to add a new user to Data.scv file
        Button SignUp = new Button("Sign Up as Student");
        SignUp.setOnAction(e -> SignUp(textField.getText(), textField1.getText()));
        
        // button to take user to the login page
        Button LogIn = new Button("Go to LogIn page");
        LogIn.setOnAction(e -> {
        	// Creating a sequence where the LogIn button first closes the current stage and 
        	// proceeds to show the new stage.
        	// The current stage refers to SignUp Page and new stage refers to LogIn Page.
        	Stage currentStage = (Stage) LogIn.getScene().getWindow(); 
            currentStage.close();
            Stage newStage = new Stage();
            
            // Adding text fields and button for LogIn Page.
            Text text6 = new Text("Enter your ID:");
            Text text7 = new Text("Enter your Password");
            TextField textField2 = new TextField();
            TextField textField3 = new TextField();
            
            Button LogIn1 = new Button("Log In as Student");
            LogIn1.setOnAction(event -> {
            	try {
                    int ID = authenticate(textField2.getText(), textField3.getText());
                    // If the Authentication is successful, current stage is closed and new stage 
                    // is created...
                    if (ID != -1) { 
                    	Stage currentStage1 = (Stage) LogIn1.getScene().getWindow(); 
                        currentStage1.close();
                        // Calls the function which generates a new stage for each student...
                        StageGenerator(ID);
                    } 
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            });
            
            Button LogIn2 = new Button("Log In as Teacher");
            LogIn2.setOnAction(event -> {
                try {
                	// First we will display an error message dialog if either one or both text 
                	// fields are empty...
                	if (textField2.getText().isEmpty() || textField3.getText().isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Please enter both ID and Password to Log In.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                	
                	// Now we will call the authenticate1 function...
                    if (authenticate1(textField2.getText(), textField3.getText())) {
                        // If the Authentication is successful, current stage is closed and new stage 
                        // is created...
                    	Stage currentStage1 = (Stage) LogIn2.getScene().getWindow(); 
                        currentStage1.close();
                        Stage newStage1 = new Stage();
                        
                        // This code reads the uploaded assignment files' names from the text document...
                        // Please change this file location to any local directory you want to use... 
                        File textFile = new File("C:\\Users\\User\\Desktop\\SEM 1\\Software Engg\\New folder\\assignment-portal\\src\\main\\resources\\Assignment Storage\\List.txt");
                        String assignmentlist = AssignmentFilesNameDisplayer(textFile);
                        
                        // This code displays the files' names...
                        TextArea textarea = new TextArea();
                        textarea.setText(assignmentlist);
                        textarea.setEditable(false);
                        
                        // Creating a layout and displaying the scene...
                        VBox layout = new VBox(10);
                        layout.getChildren().addAll(textarea);
                        Scene scene = new Scene(layout, 640, 480);
                        newStage1.setScene(scene);
                        newStage1.show();
                        newStage.setTitle("Teacher's Portal");
                        
                    } else {
                        // Displays an error message if authentication fails.
                        Alert alert = new Alert(AlertType.ERROR);
                        alert.setTitle("Authentication Failed");
                        alert.setHeaderText(null);
                        alert.setContentText("Invalid username or password. Please try again.");
                        alert.showAndWait();
                    }
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            });

            // A button to go back to the Sign In page from the Log In Page...
            Button LogIn3 = new Button("Go Back to SignUp Page");
            LogIn3.setOnAction(event -> {
            	if (stage != null) {
                    // Shows the previous stage and close the current stage
                    stage.show();
                    newStage.close();
                }	
            });
            
            // Creation of a simple layout for Login page.
            Pane layout1 = new VBox(2);
            layout1.getChildren().addAll(text6, textField2, text7, textField3, LogIn1, LogIn2, LogIn3);
            Scene newScene = new Scene(layout1, 640, 480);
            newStage.setScene(newScene);
            newStage.show();
            newStage.setTitle("Assignment Portal");
        });

        
        // Adding texts before the text fields for Sign In Page
        Text text1 = new Text("Choose your ID:");
        Text text2 = new Text("Choose your Password");
        Text text3 = new Text("Teachers email at ankit.anand@uni-weimar.de to get the login details.");
        Text text4 = new Text("Click the LogIn Page button if you are already registered.");
        Text text5 = new Text("Students register using the Sign Up button below. "
        		+ "After registration, go to the login page.");
        
        // Creation of a simple layout for Sign In page
        Pane layout = new VBox(2);
        layout.getChildren().addAll(text3, text4, text5, text1, textField, text2, textField1, SignUp, LogIn);
        Scene scene = new Scene(layout, 640, 480);
        stage.setScene(scene);
        stage.setTitle("Assignment Portal");
        stage.show();
    }

    // The method which handle the registration process for students...
    private void SignUp(String Identity, String Password) {
    	// First the function will display an error message dialog if either one or both text 
    	// fields are empty...
    	if (Identity.isEmpty() || Password.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter both ID and Password to sign up.", "Error", JOptionPane.ERROR_MESSAGE);
            return; 
        }
    	else {
    	// Calls the sign up function from Datastore2.java
        Datastore2.SignUp(Identity, Password);
        Alert alert = new Alert(AlertType.INFORMATION);
        alert.setTitle("Signup Successful");
        alert.setHeaderText(null);
        alert.setContentText("Data Added successfully!");
        alert.showAndWait();
    	}
    }

    // The method which handles the login process for students...
    private int authenticate(String identity, String password) throws IOException {
        // Displays an error message if either the ID/password or both are empty...
        if (identity.isEmpty() || password.isEmpty()) {
        	JOptionPane.showMessageDialog(null, "Please enter both ID and Password to sign up.", "Error", JOptionPane.ERROR_MESSAGE);
            return -1;
        }
        // Calls the authentication function from Datastore2.java
        int ID = Datastore2.LogInAuthentication(identity, password);
        // If the Authentication is successful, it return the student's ID...
        if (ID != -1) {
            return ID; 
        } else {
            // If Authentication is failed, it displays and error message...
            Alert alert = new Alert(AlertType.ERROR);
            alert.setTitle("Authentication Failed");
            alert.setHeaderText(null);
            alert.setContentText("Invalid username or password. Please try again.");
            alert.showAndWait();
            return -1;
        }
    }

    // The method which handles the login process for teachers...
    private boolean authenticate1(String Identity, String Password) throws IOException {
        // Calls the authentication function from DataStoreCsv.java
        return DataStoreCsv.LogInAuthentication(Identity, Password);
    }

    // The method which generates a new stage for each student whenever they login. It also stores files'
    // names and performs the upload function as well...
    private void StageGenerator(int ID) {
        // Creating a new stage and layout...
        Stage newStage = new Stage();
        newStage.setTitle("Assignment Portal - Student " + ID);
        TextField fileName = new TextField();
        fileName.setEditable(false);

        // The following code adds the file explorer option which helps in choosing a file/assignment...
        fileChooser = new FileChooser();
        fileChooser.setTitle("Select Assignment File");
        
        // Setting up a text file as a destination to store the assignment files' names
        // so that teachers can have access to them from their portal...
        // Please change this file location to any local directory you want to use... 
        String uploadDirectoryPath = "C:\\Users\\User\\Desktop\\SEM 1\\Software Engg\\New folder\\assignment-portal\\src\\main\\resources\\Assignment Storage";
        File uploadDirectory = new File(uploadDirectoryPath);
        
        // The following code uploads the selected file to the local directory...
        Button selectButton = new Button("Select File");
        Button uploadButton = new Button("Upload File");
        selectButton.setOnAction(event -> {
            File file = fileChooser.showOpenDialog(newStage);
            if (file != null) {
            	fileName.setText(file.getName());
                
                // This the actual code that writes the assignment files' names in the text file...
            	// This code also writes the unique student ID as well so that the teacher may know
            	// which file is uploaded by whom...
                // Please change this file location to any local directory you want to use... 
                String textFilePath = "C:\\Users\\User\\Desktop\\SEM 1\\Software Engg\\New folder\\assignment-portal\\src\\main\\resources\\\\Assignment Storage\\List.txt";
                File textFile = new File(textFilePath);
                try (BufferedWriter writer = new BufferedWriter(
                        new OutputStreamWriter(new FileOutputStream(textFile, true)))) {
                    writer.write("Student ID: " + ID + ", File Name: " + file.getName() + System.lineSeparator());
                } catch (IOException e) {
                    e.printStackTrace();
                }
                
                // After writing the file name, we are now calling the FileUploader() method...
                uploadButton.setOnAction(event1 -> {
                	if (file != null && AssignmentFileUploader(file, uploadDirectory)) {
                		Alert alert = new Alert(AlertType.INFORMATION);
                        alert.setTitle("Upload Successful");
                        alert.setHeaderText(null);
                        alert.setContentText("File uploaded successfully!");
                        alert.showAndWait();
                	}
                	else {
                		Alert alert = new Alert(AlertType.ERROR);
                        alert.setTitle("Upload Failed");
                        alert.setHeaderText(null);
                        alert.setContentText("Please select a file.");
                        alert.showAndWait();	
                	};
                });
            } 
        }); 	

        // Creating a scene for each student and displaying it on the login stage...
        VBox vbox = new VBox(10);
        vbox.getChildren().addAll(fileName, selectButton, uploadButton);
        Scene scene = new Scene(vbox, 400, 200);
        newStage.setScene(scene);
        newStage.show();
    }

    // This method basically copies the file from the source to destination which
    // in this case is an Assignment Storage folder created in the resources folder...
    private boolean AssignmentFileUploader(File source, File destinationDirectory) {
    	if (source == null) {
            return false; 
        }
        File destinationFile = new File(destinationDirectory, source.getName());
        try {
            Files.copy(source.toPath(), destinationFile.toPath());
            return true;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }
    
    // This is the actual code that reads the assignments files' names from the text file and returns 
    // them as a string...
    private String AssignmentFilesNameDisplayer(File file) throws IOException {
        StringBuilder content = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                content.append(line).append("\n");
            }
        }
        return content.toString();
    }

    public static void main(String[] args) {
        launch();
    }
}        

